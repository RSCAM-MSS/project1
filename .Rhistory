init = re$par
ptrdata[i,"par1"] = init[1]
ptrdata[i,"par2"] = init[2]
}
View(ptrdata)
# Will get the proba of loosing (0), winning (2), having a draw(1)
ptrdata$p0 = NaN
ptrdata$p1 = NaN
ptrdata$p2 = NaN
ptrdata$p0 = mapply(function(par1,par2,i,j,t) Dav_pdf(0,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p1 = mapply(function(par1,par2,i,j,t) Dav_pdf(1,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p2 = mapply(function(par1,par2,i,j,t) Dav_pdf(2,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
# Build a
ptrdata<-ptrdata %>% mutate(
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2))
# Get the RPS
ptrdata$RPS = mapply(function(p0,p1,a0,a1) ((p0-a0)^2 + (p0-a0+p1-a1)^2)/2,p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
# Get the predicted outcome and accuracy
ptrdata$Outcome = mapply(function(p0,p1,p2) (which.max(c(p0,p1,p2))-1),p0 = ptrdata$p0,p1 = ptrdata$p1,p2 = ptrdata$p2)
ptrdata$Accuracy = as.numeric(ptrdata$Outcome == ptrdata$WDL)
mapply(function(p0,p1,a0,a1) ((p0-a0)^2 + (p0-a0+p1-a1)^2)/2,p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
ptrdata$p0
ptrdata$p1
ptrdata$WDL_0
ptrdata$WDL_1
View(ptrdata)
lapply(function(p0,p1,a0,a1) ((p0-a0)^2 + (p0-a0+p1-a1)^2)/2,p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
mapply(function(p0,p1,a0,a1) ((p0-a0)^2 + (p0-a0+p1-a1)^2)/2,p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
apply(function(p0,p1,a0,a1) ((p0-a0)^2 + (p0-a0+p1-a1)^2)/2,p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
ptrdata$RPS = apply(RPS_fun(p0,p1,a0,a1), p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
RPS_fun<-function(p0,p1,a0,a1){
s1 = (p0-a0)
s2 = (p0-a0+p1-a1)
r = (s1*s1 + s2*s2)/2
return(r)
}
ptrdata$RPS = apply(RPS_fun(p0,p1,a0,a1), p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
ptrdata$RPS = apply(RPS_fun(p0,p1,a0,a1), p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
ptrdata$RPS = mapply(RPS_fun(p0,p1,a0,a1), p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
ptrdata$RPS = mapply(RPS_fun(p0,p1,a0,a1), p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
View(ptrdata)
ptrdata$p0
ptrdata$p0
ptrdata
View(ptrdata)
source('~/GitHub/project1/model_soccer_RPS.R', echo=TRUE)
rm(list = ls())
setwd("~/GitHub/project1")
source("features.R")
source("models/prop.R")
source("models/BL.R")
N = (nrow(dt))
init = c(.5,.5)
Nseason = nrow(dt)
tr_data_par = dt #rbind(trdata_season, trdata) # Add the data from trdata_season GER1, to compute the parameters.
ptrdata = tr_data_par[550:600,]
ptrdata$par1 = NaN
ptrdata$par2 = NaN
for(i in 1:50) {
# get the subset
endi <-i+550
tr_subset = tr_data_par[500:endi,]
# get the suited parameters
re = optim(par=init,fn=ll_BL,data=tr_subset,method_pdf=Dav_pdf,method="BFGS",control=list(fnscale=-1))
init = re$par
ptrdata[i,"par1"] = init[1]
ptrdata[i,"par2"] = init[2]
}
ptrdata$p0 = NaN
ptrdata$p1 = NaN
ptrdata$p2 = NaN
ptrdata$p0 = mapply(function(par1,par2,i,j,t) Dav_pdf(0,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p1 = mapply(function(par1,par2,i,j,t) Dav_pdf(1,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p2 = mapply(function(par1,par2,i,j,t) Dav_pdf(2,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata<-ptrdata %>% mutate(
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2))
RPS_fun<-function(p0,p1,a0,a1){
s1 = (p0-a0)
s2 = (p0-a0+p1-a1)
r = (s1*s1 + s2*s2)/2
return(r)
}
ptrdata$RPS = mapply(RPS_fun(p0,p1,a0,a1), p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
View(ptrdata)
ptrdata$p0
ptrdata$p0
View(ptrdata)
print("hhhh")
ptrdata$p0
dim(ptrdata$p0)
mapply(function(par1,par2,i,j,t) Dav_pdf(0,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p0 = mapply(function(par1,par2,i,j,t) Dav_pdf(0,par2,par1,i,j,t,ma),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t, ma = ptrdata)
ptrdata$p1 = mapply(function(par1,par2,i,j,t) Dav_pdf(1,par2,par1,i,j,t,ma),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t, ma = ptrdata)
ptrdata$p2 = mapply(function(par1,par2,i,j,t) Dav_pdf(2,par2,par1,i,j,t,ma),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t, ma = ptrdata)
ptrdata$p0 = mapply(function(par1,par2,i,j,t,ma) Dav_pdf(0,par2,par1,i,j,t,ma),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t, ma = ptrdata)
ptrdata$p1 = mapply(function(par1,par2,i,j,t,ma) Dav_pdf(1,par2,par1,i,j,t,ma),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t, ma = ptrdata)
ptrdata$p2 = mapply(function(par1,par2,i,j,t,ma) Dav_pdf(2,par2,par1,i,j,t,ma),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t, ma = ptrdata)
# Build a table similar
mapply(function(par1,par2,i,j,t,ma) Dav_pdf(0,par2,par1,i,j,t,ma),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t, ma = ptrdata)
ptrdata$p0 = mapply(function(par1,par2,i,j,t) Dav_pdf(0,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p1 = mapply(function(par1,par2,i,j,t) Dav_pdf(1,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p2 = mapply(function(par1,par2,i,j,t) Dav_pdf(2,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
Dav_pdf <- function(y,delta,beta,i,j,t,ma) {
piit <- exp(lit(beta,i,t,ma))
pijt <- exp(lit(beta,j,t,ma))
num = delta*sqrt(piit*pijt)
denom = piit + pijt + num
p1 = num/denom
case_when(
y == 1 ~ p1,
y == 0 ~ (1-p1)*pijt/(piit+pijt),
y == 2 ~ (1-p1)*piit/(piit+pijt)
)
}
lit <- function(beta,i,t,ma) {
hit = (ma$Home == i)
return(beta*hit)
}
ll_BL <- function(theta,data,method_pdf) {
beta = theta[1]
delta = theta[-1]
N = nrow(data)
ll = 0
for (k in 1:N) {
ma = data[k,]
i = ma$Home
j = ma$Away
t = ma$t
y = ma$WDL
ll = ll + log10(method_pdf(y,delta,beta,i,j,t,ma))
}
return(ll)
}
ptrdata$p0 = mapply(function(par1,par2,i,j,t) Dav_pdf(0,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p1 = mapply(function(par1,par2,i,j,t) Dav_pdf(1,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p2 = mapply(function(par1,par2,i,j,t) Dav_pdf(2,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p0 = mapply(function(par1,par2,i,j,t) Dav_pdf(0,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p1 = mapply(function(par1,par2,i,j,t) Dav_pdf(1,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata$p2 = mapply(function(par1,par2,i,j,t) Dav_pdf(2,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
View(ptrdata)
# Get the RPS
RPS_fun<-function(p0,p1,a0,a1){
s1 = (p0-a0)
s2 = (p0-a0+p1-a1)
r = (s1*s1 + s2*s2)/2
return(r)
}
ptrdata$RPS = mapply(RPS_fun(p0,p1,a0,a1), p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
ptrdata$RPS = mapply(RPS_fun(p0,p1,a0,a1), p0 = ptrdata$p0,p1 = ptrdata$p1, a0 =ptrdata$WDL_0,a1 = ptrdata$WDL_1)
ptrdata$p0
mapply(function(par1,par2,i,j,t) Dav_pdf(0,par2,par1,i,j,t,ptrdata),par1 = ptrdata$par1, par2 = ptrdata$par2, i=ptrdata$Home,j=ptrdata$Away,t=ptrdata$t)
ptrdata = ptrdata %>% mutate(
ptrdata = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata)
)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata)
)
View(ptrdata)
source("models/BL.R")
N = (nrow(dt))
init = c(.5,.5)
Nseason = nrow(dt)
tr_data_par = dt #rbind(trdata_season, trdata) # Add the data from trdata_season GER1, to compute the parameters.
ptrdata = tr_data_par[550:600,]
ptrdata$par1 = NaN
ptrdata$par2 = NaN
for(i in 1:50) {
# get the subset
endi <-i+550
tr_subset = tr_data_par[500:endi,]
# get the suited parameters
re = optim(par=init,fn=ll_BL,data=tr_subset,method_pdf=Dav_pdf,method="BFGS",control=list(fnscale=-1))
init = re$par
ptrdata[i,"par1"] = init[1]
ptrdata[i,"par2"] = init[2]
}
ptrdata$p0 = NaN
ptrdata$p1 = NaN
ptrdata$p2 = NaN
View(ptrdata)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata)
)
View(ptrdata)
ptrdata$p0 = NaN
ptrdata$p1 = NaN
ptrdata$p2 = NaN
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2)
)
RPS_fun<-function(p0,p1,a0,a1){
s1 = (p0-a0)
s2 = (p0-a0+p1-a1)
r = (s1*s1 + s2*s2)/2
return(r)
}
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1)
)
View(ptrdata)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
Outcome = which.max(p0,p1,p2)-1,
Accuracy = as.numeric(Outcome == WDL)
)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
Outcome = which.max(p0,p1)-1,
Accuracy = as.numeric(Outcome == WDL)
)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
#Outcome = which.max(p0,p1)-1,
Accuracy = as.numeric(Outcome == WDL)
)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
#Outcome = which.max(p0,p1)-1,
Accuracy = as.numeric(1 == WDL)
)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
Outcome = which.max(p0,p1,p2),
Accuracy = as.numeric(1 == WDL)
)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
max_p = max(p0,p1,p2),
Outcome = 0*(max_p == p0)+1*(max_p == p1)+2*(max_p == p2)
Accuracy = as.numeric(1 == WDL)
)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
max_p = max(p0,p1,p2),
Outcome = 0*(max_p == p0)+1*(max_p == p1)+2*(max_p == p2),
Accuracy = as.numeric(1 == WDL)
)
View(ptrdata)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
max_p = max(max(p0,p1,na.rm = TRUE),p2,na.rm=TRUE),
Outcome = 0*(max_p == p0)+1*(max_p == p1)+2*(max_p == p2),
Accuracy = as.numeric(1 == WDL)
)
View(ptrdata)
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
max_p = max(p0,p1,p2,na.rm = TRUE),
Outcome = 0*(max_p == p0)+1*(max_p == p1)+2*(max_p == p2),
Accuracy = as.numeric(1 == WDL)
)
View(ptrdata)
# Save the results
ptrdata.dav = ptrdata
View(ptrdata.dav)
mean(ptrdata.dav$RPS,na.rm=TRUE)
Predict_Proba<-function(dt,Dav_pdf,ll_BL){
N = (nrow(dt))
init = c(.5,.5)
Nseason = nrow(dt)
tr_data_par = dt #rbind(trdata_season, trdata) # Add the data from trdata_season GER1, to compute the parameters.
ptrdata = tr_data_par[550:600,]
ptrdata$par1 = NaN
ptrdata$par2 = NaN
for(i in 1:50) {
# get the subset
endi <-i+550
tr_subset = tr_data_par[500:endi,]
# get the suited parameters
re = optim(par=init,fn=ll_BL,data=tr_subset,method_pdf=Dav_pdf,method="BFGS",control=list(fnscale=-1))
init = re$par
ptrdata[i,"par1"] = init[1]
ptrdata[i,"par2"] = init[2]
}
# Will get the proba of loosing (0), winning (2), having a draw(1)
ptrdata$p0 = NaN
ptrdata$p1 = NaN
ptrdata$p2 = NaN
# Get the RPS
RPS_fun<-function(p0,p1,a0,a1){
s1 = (p0-a0)
s2 = (p0-a0+p1-a1)
r = (s1*s1 + s2*s2)/2
return(r)
}
ptrdata = ptrdata %>% mutate(
p0 = Dav_pdf(0,par2,par1,Home,Away,t,ptrdata),
p1 = Dav_pdf(1,par2,par1,Home,Away,t,ptrdata),
p2 = Dav_pdf(2,par2,par1,Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
#Problem with computing the accuracy
max_p = max(p0,p1,p2,na.rm = TRUE),
Outcome = 0*(max_p == p0)+1*(max_p == p1)+2*(max_p == p2),
Accuracy = as.numeric(1 == WDL)
)
# Save the results
ptrdata.dav = ptrdata
View(ptrdata.dav)
mean(ptrdata.dav$RPS,na.rm=TRUE)
}
N = (nrow(dt))
init = c(.5,.5)
Nseason = nrow(dt)
tr_data_par = dt #rbind(trdata_season, trdata) # Add the data from trdata_season GER1, to compute the parameters.
ptrdata = tr_data_par[550:600,]
ptrdata$par1 = NaN
ptrdata$par2 = NaN
ptrdata$par3 = NaN
for(i in 1:50) {
# get the subset
endi <-i+550
tr_subset = tr_data_par[500:endi,]
# get the suited parameters
#get the suited parameters
re = optim(par=init,fn=ll_BL,data=tr_subset,method_pdf=Ord_pdf,method="BFGS",control=list(fnscale=-1))
init = re$par
ptrdata[i,"par1"] = init[1]
ptrdata[i,"par2"] = init[2]
ptrdata[i,"par3"] = init[3]
}
N = (nrow(dt))
init = c(.5,.5)
Nseason = nrow(dt)
tr_data_par = dt #rbind(trdata_season, trdata) # Add the data from trdata_season GER1, to compute the parameters.
ptrdata = tr_data_par[550:600,]
ptrdata$par1 = NaN
ptrdata$par2 = NaN
ptrdata$par3 = NaN
for(i in 1:50) {
# get the subset
endi <-i+550
tr_subset = tr_data_par[500:endi,]
# get the suited parameters
#get the suited parameters
re = optim(par=init,fn=ll_BL,data=tr_subset,method_pdf=Ord_pdf,method="BFGS",control=list(fnscale=-1))
init = re$par
ptrdata[i,"par1"] = init[1]
ptrdata[i,"par2"] = init[2]
ptrdata[i,"par3"] = init[3]
}
ptrdata = ptrdata %>% mutate(
p0 = Ord_pdf(0,c(par2,par3),Home,Away,t,ptrdata),
p1 = Ord_pdf(1,c(par2,par3),Home,Away,t,ptrdata),
p2 = Ord_pdf(2,c(par2,par3),Home,Away,t,ptrdata),
# Build a table similar to what's in the paper
# a1 = team i loose WDL_0
# a2 = team i draw WDL_1
# a3 = team i win WDL_2
WDL_0 = 1*(WDL == 0),
WDL_1 = 1*(WDL == 1),
WDL_2 = 1*(WDL == 2),
RPS = RPS_fun(p0,p1,WDL_0,WDL_1),
#Problem with computing the accuracy
max_p = max(p0,p1,p2,na.rm = TRUE),
Outcome = 0*(max_p == p0)+1*(max_p == p1)+2*(max_p == p2),
Accuracy = as.numeric(1 == WDL)
)
# Save the results
ptrdata.ord = ptrdata
View(ptrdata.ord)
mean(ptrdata.dav$RPS,na.rm=TRUE)
source("models/CS.R")
N = (nrow(dt))
init = c(.5,.5)
Nseason = nrow(dt)
tr_data_par = dt #rbind(trdata_season, trdata) # Add the data from trdata_season GER1, to compute the parameters.
ptrdata = tr_data_par[550:600,]
ptrdata$par1 = NaN
ptrdata$par2 = NaN
for(i in 1:50) {
# get the subset
endi <-i+550
tr_subset = tr_data_par[500:endi,]
# get the suited parameters
re = optim(par=init,fn=ll_BL,data=tr_subset,method_pdf=Dav_pdf,method="BFGS",control=list(fnscale=-1))
init = re$par
ptrdata[i,"par1"] = init[1]
ptrdata[i,"par2"] = init[2]
}
# Will get the proba of loosing (0), winning (2), having a draw(1)
ptrdata$p0 = NaN
ptrdata$p1 = NaN
ptrdata$p2 = NaN
# Get the RPS
# get the functions that are necessary
league_chosen = "GER2"
source("models/prop.R")
data_soccer <- read.delim("data_input/ISDBv2.0.txt")
#setwd("~/GitHub/project1")
league_chosen = "GER2"
source("features.R")
# get the functions that are necessary
league_chosen = "GER2"
source("models/prop.R")
